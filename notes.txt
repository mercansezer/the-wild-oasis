//REACT PORTAL
//REACT PORTAL
//REACT PORTAL
React portal is a feature that essentially allows us to render an element outside of the parent component's DOM structure while still keeping the element in the original position of the component tree. So in other words, with a portal we can basically render a component
in any place that we want inside the DOM tree but still leave the component at the same place in the React component tree. And so then things like props keep working normally. And so this is great and generally used for all elements that we want to stay on top of other elements. So things like modal windows, tool tips, menus and so on.


createPortal ile return edilir, 2 parametre veririz, ilk olarak componentimizi ikincisi ise nerede tutmak istiyoruz bu componenti. Dom tree'de bu artık body'de ve hala props özelliği falan devam ediyor ve components kısmına bakarsan eğer insert kısmından orada hala aynı yerde.

function Modal({ children, onClose }) {
  return createPortal(
    <Overlay>
      <StyledModal>
        <Button onClick={onClose}>
          <HiXMark />
        </Button>
        <div>{children}</div>
      </StyledModal>
    </Overlay>,
    document.body
  );
}

export default Modal;


But now you might be wondering, this worked really great already in the beginning with just regular CSS positioning, so without the portal. And so why do we even need to use this portal? Well, the main reason why a portal becomes necessary is in order to avoid conflicts with the CSS property overflow set to hidden. So many times we build a component like a modal and it works just fine, but then some other developer will reuse it somewhere else and that somewhere else might be a place where the modal will get cut off by a overflow hidden set on the parent. So this is basically all about reusability and making sure that the component will never be cut off by an overflow property set to hidden on some parent element. So in order to avoid this kind of situation we simply render the modal completely outside of the rest of the DOM. So basically on top of the DOM tree as we just did here. All right, so hopefully this made sense.